to import fonts

=> in app/ui => fonts.ts
    import { Inter } from 'next/font/google';
    import { Lusitana } from 'next/font/google';
    
    export const inter = Inter({ subsets: ['latin'] });
    export const lusitana  = Lusitana ({ weight: ['400', '700'], subsets: ['latin'] });

then, to use in component:
    import { inter } from '@/app/ui/fonts';

    <body className={`${inter.className}`}>{children}</body>

________________________________________________________________________________________

mages opti

<Image> component is an extension of the <img> tag; comes with automatic image optimization
e.g.
    <Image
        src="/hero-desktop.png"
        width={1000}
        height={760}
        className="hidden md:block"
        alt="Screenshots of the dashboard project showing desktop version"
    />

good practice to use height & width; shoul correspond to image proportions

________________________________________________________________________________________

file system routing in Next.js => each folder represents a route segment that maps to a URL segment
should contain :
- page.tsx - a special Next.js file that exports a React component, and it's required for the route to be accessible 
    => /app/page.tsx - home page associated with the route /
- layout.tsx - file to create UI that is shared between multiple pages
    has a prop {children} which are the components to be inserted in a the layout, e.g.

    export default function Layout({ children }: { children: React.ReactNode }) {
    return (
        <div className="flex h-screen flex-col">
            <SideNav />
            {children}   // here are inserted all pages inside this route
        </div>
    );
}

________________________________________________________________________________________

navigation

<Link /> component to link between pages in application
to use :
    import Link from 'next/link';

showing active links:
to do this, need to get the user's current path from the URL; Next.js provides a hook called usePathname() that one can use to check the path

!!! usePathname == hook => the component where it will be used must be transformed into a "client component" => add "use client"
=> inside component

    'use client';
    import { usePathname } from 'next/navigation';

    export default function NavLinks() {
        const pathname = usePathname();
        ...
    }

now possible to use the clsx lib to conditionally apply class names (=> also import clsx from 'clsx';)
=> inside link:
    <Link
        key={link.name}
        href={link.href}
        className={clsx(
            'flex h-[48px] grow items-center justify-center gap-2 rounded-md bg-gray-50 p-3 text-sm font-medium hover:bg-sky-100 hover:text-blue-600 md:flex-none md:justify-start md:p-2 md:px-3',
            {
            'bg-sky-100 text-blue-600': pathname === link.href,
            },
        )}
    >
________________________________________________________________________________________

connecting a DB:
in the tuto, we deploy the project on vercel;
we add storage => postgres => set in Washington (for better latency)
then we create a storage && copy local .env data => insert in .env in our project (must be in gitignore)
=>
run npm i @vercel/postgres to install the Vercel Postgres SDK

=> created a db

in /scripts/seed.ls there are info on a db creation => insrt this line 
    "seed": "node -r dotenv/config ./scripts/seed.js"
inside package.json
=> run npm run seed

________________________________________________________________________________________

data fething
- via API => create endpoints using route handlers
- via DB queries
- using server components to fetch data
- using sql (got to import { sql } from '@vercel/postgres'; as it is done in /app/lib/data.ts + all the queries needed)

each query - a function that we can import, e.g.

    export async function fetchRevenue() {
        try {
            const data = await sql<Revenue>`SELECT * FROM revenue`;
            return data.rows;
        } catch (error) {
            console.error('Database Error:', error);
            throw new Error('Failed to fetch revenue data.');
        }
    }

then we can import in on the page where we need it :
    import { fetchRevenue } from '@/app/lib/data';

more data on this page - https://nextjs.org/learn/dashboard-app/fetching-data
________________________________________________________________________________________

when our page is an async function => it is to let it await some fetched data

normally, data is fetched in "request waterfall" (one fetch starts when another ends) if we do like this :
    const revenue = await fetchRevenue();
    const latestInvoices = await fetchLatestInvoices();  // wait for fetchRevenue() to finish

if we want it to be simultaneous (when no need to get one info before getting another), we can use Promise.all()
e.g.
    const data = await Promise.all([
        invoiceCountPromise,
        customerCountPromise,
        invoiceStatusPromise,
    ])

________________________________________________________________________________________

statis vs. dynamic rendering

Static Rendering:
data fetching and rendering happens on the server at build time (when you deploy) or during revalidation

Dynamic Rendering:
content is rendered on the server for each user at request time (when the user visits the page); pros:
- Real-Time Data; ideal for applications where data changes often
- User-Specific Content
- Request Time Information - allows you to access information that can only be known at request time

to make a page dynamic :

    import { unstable_noStore as noStore } from 'next/cache';

add noStore(); func in the beginning of all async functions, e.g.
    export async function fetchLatestInvoices() {
        noStore();
        // reste du code ...
    }

________________________________________________________________________________________

cp 9 https://nextjs.org/learn/dashboard-app/streaming

streaming
streaming is a data transfer technique that allows you to break down a route into smaller "chunks" (components) and progressively stream them from the server to the client as they become ready

streaming cn be done either via loading.tsx file, or through <Suspense> component

1. loading.tsx
special Next.js file built on top of Suspense, it allows you to create fallback UI to show as a replacement while page content loads
static elements, such as menus, sidebars, are loaded immediately, the rest that's async is temporarily replaced by contents of loading.tsx

can also add "loading skeletons" => a simplified version of UI

    import DashboardSkeleton from '@/app/ui/skeletons';

    export default function Loading() {
        return <DashboardSkeleton />;
    }

(those are coded by hand)

now the loading file is on the same level as folders /invoices/ & /customers/, so it will apply to them as well; this can be changed with route groups. to do so, inside /dashboard/ we create a new folder /(overview)/ [sic] and put the loader && the page.tsx routes inside
the route created (in parenthesis) will not appear in url

2. suspense 
Suspense allows you to defer rendering parts of your application until some condition is met (e.g. data is loaded). You can wrap your dynamic components in Suspense. Then, pass it a fallback component to show while the dynamic component loads.
___

grouping components
___

In general, it's good practice to move your data fetches down to the components that need it, and then wrap those components in Suspense. But there is nothing wrong with streaming the sections or the whole page if that's what your application needs.

________________________________________________________________________________________

search & pagination
pt 11 https://nextjs.org/learn/dashboard-app/adding-search-and-pagination

Next.js client hooks that you'll use to implement the search functionality:
- useSearchParams- Allows you to access the parameters of the current URL. For example, the search params for this URL /dashboard/invoices?page=1&query=pending would look like this: {page: '1', query: 'pending'}.
- usePathname - Lets you read the current URL's pathname. For example, for the route /dashboard/invoices, usePathname would return '/dashboard/invoices'.
- useRouter - Enables navigation between routes within client components programmatically. There are multiple methods you can use.


When to use the useSearchParams() hook vs. the searchParams prop?

You might have noticed you used two different ways to extract search params. Whether you use one or the other depends on whether you're working on the client or the server.

<Search> is a Client Component, so you used the useSearchParams() hook to access the params from the client.
<Table> is a Server Component that fetches its own data, so you can pass the searchParams prop from the page to the component.
As a general rule, if you want to read the params from the client, use the useSearchParams() hook as this avoids having to go back to the server.










