to import fonts

=> in app/ui => fonts.ts
    import { Inter } from 'next/font/google';
    import { Lusitana } from 'next/font/google';
    
    export const inter = Inter({ subsets: ['latin'] });
    export const lusitana  = Lusitana ({ weight: ['400', '700'], subsets: ['latin'] });

then, to use in component:
    import { inter } from '@/app/ui/fonts';

    <body className={`${inter.className}`}>{children}</body>

________________________________________________________________________________________

mages opti

<Image> component is an extension of the <img> tag; comes with automatic image optimization
e.g.
    <Image
        src="/hero-desktop.png"
        width={1000}
        height={760}
        className="hidden md:block"
        alt="Screenshots of the dashboard project showing desktop version"
    />

good practice to use height & width; shoul correspond to image proportions

________________________________________________________________________________________

file system routing in Next.js => each folder represents a route segment that maps to a URL segment
should contain :
- page.tsx - a special Next.js file that exports a React component, and it's required for the route to be accessible 
    => /app/page.tsx - home page associated with the route /
- layout.tsx - file to create UI that is shared between multiple pages
    has a prop {children} which are the components to be inserted in a the layout, e.g.

    export default function Layout({ children }: { children: React.ReactNode }) {
    return (
        <div className="flex h-screen flex-col">
            <SideNav />
            {children}   // here are inserted all pages inside this route
        </div>
    );
}

________________________________________________________________________________________

navigation

<Link /> component to link between pages in application
to use :
    import Link from 'next/link';

showing active links:
to do this, need to get the user's current path from the URL; Next.js provides a hook called usePathname() that one can use to check the path

!!! usePathname == hook => the component where it will be used must be transformed into a "client component" => add "use client"
=> inside component

    'use client';
    import { usePathname } from 'next/navigation';

    export default function NavLinks() {
        const pathname = usePathname();
        ...
    }

now possible to use the clsx lib to conditionally apply class names (=> also import clsx from 'clsx';)
=> inside link:
    <Link
        key={link.name}
        href={link.href}
        className={clsx(
            'flex h-[48px] grow items-center justify-center gap-2 rounded-md bg-gray-50 p-3 text-sm font-medium hover:bg-sky-100 hover:text-blue-600 md:flex-none md:justify-start md:p-2 md:px-3',
            {
            'bg-sky-100 text-blue-600': pathname === link.href,
            },
        )}
    >